/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as MyRecipesIndexRouteImport } from './routes/my-recipes/index'
import { Route as AddRecipeIndexRouteImport } from './routes/add-recipe/index'
import { Route as RecipeIdIndexRouteImport } from './routes/recipe/$id/index'
import { Route as Edit_recipeIdIndexRouteImport } from './routes/edit_recipe/$id/index'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const MyRecipesIndexRoute = MyRecipesIndexRouteImport.update({
  id: '/my-recipes/',
  path: '/my-recipes/',
  getParentRoute: () => rootRouteImport,
} as any)
const AddRecipeIndexRoute = AddRecipeIndexRouteImport.update({
  id: '/add-recipe/',
  path: '/add-recipe/',
  getParentRoute: () => rootRouteImport,
} as any)
const RecipeIdIndexRoute = RecipeIdIndexRouteImport.update({
  id: '/recipe/$id/',
  path: '/recipe/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const Edit_recipeIdIndexRoute = Edit_recipeIdIndexRouteImport.update({
  id: '/edit_recipe/$id/',
  path: '/edit_recipe/$id/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add-recipe': typeof AddRecipeIndexRoute
  '/my-recipes': typeof MyRecipesIndexRoute
  '/edit_recipe/$id': typeof Edit_recipeIdIndexRoute
  '/recipe/$id': typeof RecipeIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add-recipe': typeof AddRecipeIndexRoute
  '/my-recipes': typeof MyRecipesIndexRoute
  '/edit_recipe/$id': typeof Edit_recipeIdIndexRoute
  '/recipe/$id': typeof RecipeIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/add-recipe/': typeof AddRecipeIndexRoute
  '/my-recipes/': typeof MyRecipesIndexRoute
  '/edit_recipe/$id/': typeof Edit_recipeIdIndexRoute
  '/recipe/$id/': typeof RecipeIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/add-recipe'
    | '/my-recipes'
    | '/edit_recipe/$id'
    | '/recipe/$id'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/add-recipe' | '/my-recipes' | '/edit_recipe/$id' | '/recipe/$id'
  id:
    | '__root__'
    | '/'
    | '/add-recipe/'
    | '/my-recipes/'
    | '/edit_recipe/$id/'
    | '/recipe/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddRecipeIndexRoute: typeof AddRecipeIndexRoute
  MyRecipesIndexRoute: typeof MyRecipesIndexRoute
  Edit_recipeIdIndexRoute: typeof Edit_recipeIdIndexRoute
  RecipeIdIndexRoute: typeof RecipeIdIndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$'
  id: '__root__' | '/api/auth/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/my-recipes/': {
      id: '/my-recipes/'
      path: '/my-recipes'
      fullPath: '/my-recipes'
      preLoaderRoute: typeof MyRecipesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add-recipe/': {
      id: '/add-recipe/'
      path: '/add-recipe'
      fullPath: '/add-recipe'
      preLoaderRoute: typeof AddRecipeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recipe/$id/': {
      id: '/recipe/$id/'
      path: '/recipe/$id'
      fullPath: '/recipe/$id'
      preLoaderRoute: typeof RecipeIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit_recipe/$id/': {
      id: '/edit_recipe/$id/'
      path: '/edit_recipe/$id'
      fullPath: '/edit_recipe/$id'
      preLoaderRoute: typeof Edit_recipeIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddRecipeIndexRoute: AddRecipeIndexRoute,
  MyRecipesIndexRoute: MyRecipesIndexRoute,
  Edit_recipeIdIndexRoute: Edit_recipeIdIndexRoute,
  RecipeIdIndexRoute: RecipeIdIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
